# This file defines Continuous Integration (CI) tests for BRL-CAD using the
# Github Actions framework.  Currently it defines configurations for Windows,
# Linux and OSX.
#
# Initially we used examples to try and define one common configuration for all
# platforms, but that turned out to be more complex than it was worth.  The
# different platforms manifest different issues, and it is easier to keep the
# individual steps simple and address what needs addressing per-platform.
#
# For more information about available platforms for testing, see:
#
# https://docs.github.com/en/free-pro-team@latest/actions/reference/specifications-for-github-hosted-runners
#
# The general rule when building in CI is to go more verbose in output settings
# rather than less, since iterative debugging isn't practical.  We also want to
# avoid parallel building - while that will sometimes catch dependency issues,
# it also makes the outputs far harder to interpret when there is a problem.
# Better to do parallel build debugging in an environment were more interactive
# and iterative debugging is available while preserving the readability of the
# CI outputs for other issues.
#
# Note that there is another reason not to do parallel runs; we have had some
# trouble with issues that appear to be related to files not being fully
# written out to disk. To try and help mitigate this, we don't want to stress
# the I/O subsystem any more than necessary:
#
# https://github.com/actions/runner/issues/718
#

name: BRL-CAD

on: [push]

jobs:

  windows:
    name: Windows Latest MSVC - Ninja
    runs-on: windows-latest
    strategy:
      fail-fast: true
    steps:
      - name: Setup - CMake
        uses: lukka/get-cmake@latest

      - name: Setup - Qt
        uses: jurplel/install-qt-action@v3
        with:
          cache: 'true'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Add github workspace to path
        # https://github.community/t/deprecated-add-path/136621
        run: echo "$ENV{GITHUB_WORKSPACE}" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1.3

      - name: Add cl.exe to PATH
        uses: ilammy/msvc-dev-cmd@v1

      - name: Build Directory setup
        run: |
          cmake -E make_directory ./build_winninja

      - name: bext checkout
        run: |
          cd build_winninja && git clone https://github.com/BRL-CAD/bext.git && cd ..

      - name: Configure
        run: |
          cmake -S . -B build_winninja -G Ninja -DCMAKE_C_COMPILER="cl.exe" -DCMAKE_CXX_COMPILER="cl.exe" -DBRLCAD_EXT_PARALLEL=1 -DCMAKE_BUILD_TYPE=Release -DBRLCAD_ENABLE_QT=ON
          # We do the following in order to help ensure files are "flushed"
          # to disk before compilation is attempted
          # https://superuser.com/a/1553374/1286142
          powershell Write-VolumeCache C
          powershell Write-VolumeCache D

      - name: Build
        run: cd build_winninja && ninja -j1 -v && ninja check -v && ninja package

        # Various other Windows build lines used for various types of testing.
        # Preserved for reference, as the iterative time to figure out how to
        # perform them was significant...
        #run: cmake --build build_winninja --config Release --target package
        #run: cd build_winninja && ninja -j1 -v STEPCODE_BLD && cd src/other/ext/STEPCODE_BLD-prefix/src/STEPCODE_BLD-build && ninja clean && ninja -j1 -v
        #run: cmake --build build_winninja --config Release --target STEPCODE_BLD && cd build/src/other/ext/STEPCODE_BLD-prefix/src/STEPCODE_BLD-build && msbuild ALL_BUILD.vcxproj -t:clean && msbuild ALL_BUILD.vcxproj -v:diag

        # For the moment the space demands are too extreme to enable this
        # output for every compile test, but leave the enabling logic present
        # in commented out form so it can be enabled as needed.
#     - name: Upload Package
#       uses: actions/upload-artifact@v2
#       with:
#         name: BRLCAD_Windows
#         path: ${{ github.workspace }}/build_winninja/BRL-CAD*exe

  windows_std_tools:
    name: Windows Latest MSVC - Standard Tools
    runs-on: windows-latest
    strategy:
      fail-fast: true
    steps:
      - name: Setup - CMake
        uses: lukka/get-cmake@latest

      - name: Checkout
        uses: actions/checkout@v4

      - name: Add github workspace to path
        # https://github.community/t/deprecated-add-path/136621
        run: echo "$ENV{GITHUB_WORKSPACE}" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8

      - name: Build Directory setup
        run: |
          cmake -E make_directory ./build_winstd

      - name: bext checkout
        run: |
          cd ./build_winstd; git clone https://github.com/BRL-CAD/bext.git; cd ..

      - name: Configure
        run: |
          cmake -S . -B build_winstd -DBRLCAD_EXT_PARALLEL=1 -DCMAKE_BUILD_TYPE=Release
          # We do the following in order to help ensure files are "flushed"
          # to disk before compilation is attempted
          # https://superuser.com/a/1553374/1286142
          powershell Write-VolumeCache C
          powershell Write-VolumeCache D

          # At least for the moment, the main idea for this particular test is to try and
          # verify multi-config building is working as expected - to shorten build times
          # but still have a test of the key components, just build MGED
      - name: Build
        run: |
          cmake --build build_winstd --config Release --target mged


  linux:
    name: Ubuntu Latest GCC
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
      - name: Setup - CMake
        uses: lukka/get-cmake@latest

      - name: Setup - System
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          # Install X/OpenGL dev pkgs
          sudo apt-get install xserver-xorg-dev libx11-dev libxi-dev libxext-dev libglu1-mesa-dev
          sudo apt-get clean

      - name: Setup - Qt
        uses: jurplel/install-qt-action@v3
        with:
          cache: 'true'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Directory setup
        run: |
          cmake -E make_directory ./build_linux

      - name: bext checkout
        run: |
          cd ./build_linux && git clone https://github.com/BRL-CAD/bext.git && cd ..

      - name: Configure
        run: |
          export PATH=$ENV{GITHUB_WORKSPACE}:$PATH
          cmake -S . -G Ninja -B build_linux -DCMAKE_BUILD_TYPE=Release -DBRLCAD_EXT_PARALLEL=1 -DBRLCAD_ENABLE_QT=ON

      - name: Build
        run: |
          export PATH=$ENV{GITHUB_WORKSPACE}:$PATH
          cmake --build build_linux --config Release --target check
          cmake --build build_linux --config Release --target package

        # For the moment the space demands are too extreme to enable this
        # output for every compile test, but leave the enabling logic present
        # in commented out form so it can be enabled as needed.
#     - name: Upload Package
#       uses: actions/upload-artifact@v2
#       with:
#         name: BRLCAD_Linux
#         path: ${{ github.workspace }}/build_linux/BRL-CAD*gz

  osx:
    name: macOS Latest Clang
    runs-on: macos-latest
    strategy:
      fail-fast: true
    steps:
      - name: Setup - CMake
        uses: lukka/get-cmake@latest

      - name: Setup - Qt
        uses: jurplel/install-qt-action@v3
        with:
          cache: 'true'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Directory setup
        run: |
          cmake -E make_directory ./build_osx

      - name: bext checkout
        run: |
          cd ./build_osx && git clone https://github.com/BRL-CAD/bext.git && cd ..

      - name: Configure
        run: |
          export PATH=$ENV{GITHUB_WORKSPACE}:$PATH
          export CC=clang
          export CXX=clang++
          cmake -S . -G Ninja -B build_osx -DBRLCAD_EXT_PARALLEL=1 -DCMAKE_BUILD_TYPE=Release -DBRLCAD_ENABLE_QT=ON -DBRLCAD_ENABLE_X11=OFF

      - name: Build
        run: |
          export PATH=$ENV{GITHUB_WORKSPACE}:$PATH
          cd build_osx && ninja -j1 && ninja -j1 package
          #cmake --build build_osx --config Release --target check
          #cmake --build build_osx --config Release --target package

        # For the moment the space demands are too extreme to enable this
        # output for every compile test, but leave the enabling logic present
        # in commented out form so it can be enabled as needed.
#     - name: Upload Package
#       uses: actions/upload-artifact@v2
#       with:
#         name: BRLCAD_OSX
#         path: ${{ github.workspace }}/build_osx/BRL-CAD*gz

  # A full distcheck is too expensive for the runners, but we can run the
  # repository integrity check and make sure we can build source archives.
  archives:
    name: Source Archives
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
      - name: Setup - CMake
        uses: lukka/get-cmake@latest

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Directory setup
        run: |
          cmake -E make_directory ./build_archives

      - name: bext checkout
        run: |
          cd ./build_archives && git clone https://github.com/BRL-CAD/bext.git && cd ..

      - name: Configure
        run: |
          export PATH=$ENV{GITHUB_WORKSPACE}:$PATH
          cmake -S . -B build_archives -DCMAKE_BUILD_TYPE=Release -DBRLCAD_EXT_PARALLEL=1

      - name: Build
        run: |
          export PATH=$ENV{GITHUB_WORKSPACE}:$PATH
          cmake --build build_archives --config Release --target distcheck-source_archives

